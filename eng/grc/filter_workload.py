#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: Not titled yet
# Author: bquantump
# GNU Radio version: 3.9.1.0

from gnuradio import filter
from gnuradio.filter import firdes
from gnuradio import gr
from gnuradio.fft import window
import sys
import signal
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio import network
import dspcore
import numpy as np
import os
c



class filter_sig(gr.top_block):

    def __init__(self):
        gr.top_block.__init__(self, "Not titled yet", catch_exceptions=True)

        ##################################################
        # Variables
        ##################################################
        self.chan_num = chan_num = 0
        self.samp_rate = samp_rate = 30.72e6
        self.rec_port = rec_port = 60000
        self.lpf_taps = lpf_taps = [-7.975280459504575e-05, -4.9262958782492206e-05, -1.6447560483356938e-05, 1.775114651536569e-05, 5.2323939598863944e-05, 8.620815060567111e-05, 0.0001183042477350682, 0.00014749598631169647, 0.00017267520888708532, 0.00019277109822724015, 0.00020678412693087012, 0.00021382409613579512, 0.00021315101184882224, 0.00020421782392077148, 0.00018671243742574006, 0.00016059722111094743, 0.0001261434081243351, 8.395734039368108e-05, 3.499631566228345e-05, -1.9428558516665362e-05, -7.766461203573272e-05, -0.00013774647959508002, -0.0001974424085346982, -0.0002543180307839066, -0.00030581667670048773, -0.00034935466828756034, -0.00038242785376496613, -0.00040272719343192875, -0.00040825686301104724, -0.000397451629396528, -0.0003692862228490412, -0.00032337172888219357, -0.0002600329462438822, -0.00018036100664176047, -8.623716712463647e-05, 1.967684511328116e-05, 0.00013398408191278577, 0.0002526341995690018, 0.0003710418241098523, 0.00048423861153423786, 0.0005870554596185684, 0.0006743291160091758, 0.0007411251426674426, 0.000782970164436847, 0.0007960811490193009, 0.000777584791649133, 0.0007257125107571483, 0.000639963720459491, 0.0005212261457927525, 0.00037184517714194953, 0.00019563482783269137, -2.1731548258685507e-06, -0.0002150458312826231, -0.0004353296826593578, -0.0006544924690388143, -0.0008634199621155858, -0.0010527590056881309, -0.0012132939882576466, -0.0013363448670133948, -0.0014141680439934134, -0.001440347288735211, -0.0014101533452048898, -0.0013208562741056085, -0.0011719767935574055, -0.0009654563618823886, -0.0007057401817291975, -0.0003997587482444942, -5.680566391674802e-05, 0.000311691255774349, 0.0006925018969923258, 0.0010710213100537658, 0.0014317813329398632, 0.0017590289935469627, 0.0020373535808175802, 0.002252337522804737, 0.00239120633341372, 0.0024434514343738556, 0.002401400124654174, 0.0022606998682022095, 0.002020700369030237, 0.0016847088700160384, 0.001260098535567522, 0.0007582596153952181, 0.00019438723393250257, -0.00041289726505056024, -0.001042083720676601, -0.0016694576479494572, -0.002269912511110306, -0.0028178647626191378, -0.0032882390078157187, -0.0036574925761669874, -0.003904638346284628, -0.0040122224017977715, -0.003967225085943937, -0.0037618353962898254, -0.003394069615751505, -0.0028681978583335876, -0.002194953616708517, -0.0013915060553699732, -0.00048118302947841585, 0.0005070575280115008, 0.0015393999638035893, 0.0025781728327274323, 0.003583052661269903, 0.004512437153607607, 0.005324941594153643, 0.005980979185551405, 0.006444355472922325, 0.006683837156742811, 0.00667462358251214, 0.006399671547114849, 0.005850816145539284, 0.005029634106904268, 0.003948013298213482, 0.0026283967308700085, 0.0011036653304472566, -0.0005833368049934506, -0.002380644902586937, -0.004228364676237106, -0.006060187239199877, -0.007805192843079567, -0.009389887563884258, -0.010740415193140507, -0.011784891597926617, -0.012455755844712257, -0.012692097574472427, -0.012441863305866718, -0.011663862504065037, -0.01032952219247818, -0.008424297906458378, -0.005948714446276426, -0.002918964484706521, 0.0006329383468255401, 0.00465948972851038, 0.009098498150706291, 0.0138743557035923, 0.01889972947537899, 0.024077655747532845, 0.02930395118892193, 0.03446989879012108, 0.03946511074900627, 0.04418047145009041, 0.048511143773794174, 0.052359405905008316, 0.0556374192237854, 0.05826963856816292, 0.06019497662782669, 0.06136851757764816, 0.06176277622580528, 0.06136851757764816, 0.06019497662782669, 0.05826963856816292, 0.0556374192237854, 0.052359405905008316, 0.048511143773794174, 0.04418047145009041, 0.03946511074900627, 0.03446989879012108, 0.02930395118892193, 0.024077655747532845, 0.01889972947537899, 0.0138743557035923, 0.009098498150706291, 0.00465948972851038, 0.0006329383468255401, -0.002918964484706521, -0.005948714446276426, -0.008424297906458378, -0.01032952219247818, -0.011663862504065037, -0.012441863305866718, -0.012692097574472427, -0.012455755844712257, -0.011784891597926617, -0.010740415193140507, -0.009389887563884258, -0.007805192843079567, -0.006060187239199877, -0.004228364676237106, -0.002380644902586937, -0.0005833368049934506, 0.0011036653304472566, 0.0026283967308700085, 0.003948013298213482, 0.005029634106904268, 0.005850816145539284, 0.006399671547114849, 0.00667462358251214, 0.006683837156742811, 0.006444355472922325, 0.005980979185551405, 0.005324941594153643, 0.004512437153607607, 0.003583052661269903, 0.0025781728327274323, 0.0015393999638035893, 0.0005070575280115008, -0.00048118302947841585, -0.0013915060553699732, -0.002194953616708517, -0.0028681978583335876, -0.003394069615751505, -0.0037618353962898254, -0.003967225085943937, -0.0040122224017977715, -0.003904638346284628, -0.0036574925761669874, -0.0032882390078157187, -0.0028178647626191378, -0.002269912511110306, -0.0016694576479494572, -0.001042083720676601, -0.00041289726505056024, 0.00019438723393250257, 0.0007582596153952181, 0.001260098535567522, 0.0016847088700160384, 0.002020700369030237, 0.0022606998682022095, 0.002401400124654174, 0.0024434514343738556, 0.00239120633341372, 0.002252337522804737, 0.0020373535808175802, 0.0017590289935469627, 0.0014317813329398632, 0.0010710213100537658, 0.0006925018969923258, 0.000311691255774349, -5.680566391674802e-05, -0.0003997587482444942, -0.0007057401817291975, -0.0009654563618823886, -0.0011719767935574055, -0.0013208562741056085, -0.0014101533452048898, -0.001440347288735211, -0.0014141680439934134, -0.0013363448670133948, -0.0012132939882576466, -0.0010527590056881309, -0.0008634199621155858, -0.0006544924690388143, -0.0004353296826593578, -0.0002150458312826231, -2.1731548258685507e-06, 0.00019563482783269137, 0.00037184517714194953, 0.0005212261457927525, 0.000639963720459491, 0.0007257125107571483, 0.000777584791649133, 0.0007960811490193009, 0.000782970164436847, 0.0007411251426674426, 0.0006743291160091758, 0.0005870554596185684, 0.00048423861153423786, 0.0003710418241098523, 0.0002526341995690018, 0.00013398408191278577, 1.967684511328116e-05, -8.623716712463647e-05, -0.00018036100664176047, -0.0002600329462438822, -0.00032337172888219357, -0.0003692862228490412, -0.000397451629396528, -0.00040825686301104724, -0.00040272719343192875, -0.00038242785376496613, -0.00034935466828756034, -0.00030581667670048773, -0.0002543180307839066, -0.0001974424085346982, -0.00013774647959508002, -7.766461203573272e-05, -1.9428558516665362e-05, 3.499631566228345e-05, 8.395734039368108e-05, 0.0001261434081243351, 0.00016059722111094743, 0.00018671243742574006, 0.00020421782392077148, 0.00021315101184882224, 0.00021382409613579512, 0.00020678412693087012, 0.00019277109822724015, 0.00017267520888708532, 0.00014749598631169647, 0.0001183042477350682, 8.620815060567111e-05, 5.2323939598863944e-05, 1.775114651536569e-05, -1.6447560483356938e-05, -4.9262958782492206e-05, -7.975280459504575e-05]
        self.freq_offset = freq_offset = (dspcore.FFT_SAMP_RATE) * (-7.5 + chan_num)
        self.forwarding_port = forwarding_port = 60005
        self.forwarding_ip = forwarding_ip = "127.0.0.1"
        self.ZC_ROOT = ZC_ROOT = 25

    def make_blocks_and_connects(self):
        ##################################################
        # Blocks
        ##################################################
        self.network_udp_source_0 = network.udp_source(gr.sizeof_gr_complex, 1, self.rec_port, 0, 1472, False, False, False)
        self.network_udp_sink_0 = network.udp_sink(gr.sizeof_gr_complex, 1, self.forwarding_ip, self.forwarding_port, 0, 1472, False)
        self.freq_xlating_fft_filter_ccc_0 = filter.freq_xlating_fft_filter_ccc(16, self.lpf_taps, self.freq_offset, self.samp_rate)
        self.freq_xlating_fft_filter_ccc_0.set_nthreads(1)
        self.freq_xlating_fft_filter_ccc_0.declare_sample_delay(0)
        self.fft_filter_xxx_0 = filter.fft_filter_ccc(1, np.conjugate(dspcore.gen_ZC(25))[::-1], 1)
        self.fft_filter_xxx_0.declare_sample_delay(0)



        ##################################################
        # Connections
        ##################################################
        self.connect((self.fft_filter_xxx_0, 0), (self.network_udp_sink_0, 0))
        self.connect((self.freq_xlating_fft_filter_ccc_0, 0), (self.fft_filter_xxx_0, 0))
        self.connect((self.network_udp_source_0, 0), (self.freq_xlating_fft_filter_ccc_0, 0))


    def get_chan_num(self):
        return self.chan_num

    def set_chan_num(self, chan_num):
        self.chan_num = chan_num
        self.set_freq_offset((dspcore.FFT_SAMP_RATE) * (-7.5 + self.chan_num))

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate

    def get_rec_port(self):
        return self.rec_port

    def set_rec_port(self, rec_port):
        self.rec_port = rec_port

    def get_lpf_taps(self):
        return self.lpf_taps

    def set_lpf_taps(self, lpf_taps):
        self.lpf_taps = lpf_taps
        self.freq_xlating_fft_filter_ccc_0.set_taps(self.lpf_taps)

    def get_freq_offset(self):
        return self.freq_offset

    def set_freq_offset(self, freq_offset):
        self.freq_offset = freq_offset
        self.freq_xlating_fft_filter_ccc_0.set_center_freq(self.freq_offset)

    def get_forwarding_port(self):
        return self.forwarding_port

    def set_forwarding_port(self, forwarding_port):
        self.forwarding_port = forwarding_port

    def get_forwarding_ip(self):
        return self.forwarding_ip

    def set_forwarding_ip(self, forwarding_ip):
        self.forwarding_ip = forwarding_ip

    def get_ZC_ROOT(self):
        return self.ZC_ROOT

    def set_ZC_ROOT(self, ZC_ROOT):
        self.ZC_ROOT = ZC_ROOT




def main(tb):
    tb.make_blocks_and_connections()
    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()

        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    tb.start()

    try:
        input('Press Enter to quit: ')
    except EOFError:
        pass
    tb.stop()
    tb.wait()


if __name__ == '__main__':
    main()